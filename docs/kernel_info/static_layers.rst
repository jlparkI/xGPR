Static layers for sequences and graphs
--------------------------------------

Some kernels in xGPR are implemented as ``static_layers``.
A ``static_layer`` is applied to the input data and converts
it to a form that an xGPR model with a ``Linear``, ``RBF`` or
``Matern`` kernel can use as input. These are called 
``static_layers`` because they do not contain any tunable 
hyperparameters, so they can be applied to all of the training 
data *once* before the start of training. When making 
predictions for new datapoints, the ``static_layer`` must of 
course be applied to the new datapoints as well. To learn
how to do use static layers, see
:doc:`Getting started</initialization_tutorial>`
for details.

.. list-table:: static layer kernels
   :header-rows: 1

   * - Kernel Name
     - Description
   * - FastConv1d
     - | Performs random-feature convolutions across
       | input sequences to build a sequence profile
       | for each datapoint, then uses an RBF (or
       | potentially Linear or Matern) kernel to
       | compare the sequence profile of each
       | datapoint.

``FastConv1d`` is a way to compare
sequences and time series that is analogous to a three-layer
convolutional neural network. In the first (static) layer, random
feature convolutions are applied followed by global max pooling;
this essentially measures what is the "best match" for a given
random filter in the sequence of interest and thereby creates a
"sequence profile". In the second and third layer, an ``RBF``
(or potentially ``Matern`` or even ``Linear``, although we've only really used
``RBF``) kernel compares the sequence profile of training datapoints.
The convolutions are performed just once and thus ``FastConv1d`` is often
faster for hyperparameter tuning (hence the name) than ``FHTConv1d``.
(It can sometimes be slower for making predictions however since
it incorporates an extra step.)

If using these kernels, choose an ``RBF`` kernel when initializing
the xGPRegression model (for ``FastConv1d``). (You *could* also use
Linear or Matern in principle.)

For each static layer, you can supply additional arguments to control
what kind of features it generates. These are summarized below.

.. list-table:: static layer arguments
   :header-rows: 1

   * - Argument
     - Description
   * - ``seq_width``
     - | The number of features per sequence element in the
       | input (i.e. shape[2] when the input is a 3d numpy
       | array).
   * - ``conv_width``
     - | A list of convolution widths If you specify just one,
       | e.g. ``[9]``, all the features generated by the static
       | layer are generated using that ``conv_width``. If two,
       | e.g. ``[8,9]``, half the features are generated using
       | conv_width 8 and half using conv_width 9. If three widths,
       | then one-third are generated using the first, one-third
       | using the second etc. This feature enables ``FastConv1d``
       | to mimic a CNN with multiple kernel widths in one layer.
       | We have not generally found it terribly helpful to use
       | multiple widths, but this option is available if desired.
   * - ``num_features``
     - | The number of features ``FastConv1d`` should generate.
       | Larger numbers will improve accuracy but increase
       | computational expense. Try 1000 - 2000 to start with
       | and increase if needed.
